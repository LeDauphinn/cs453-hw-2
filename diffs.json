{
   "https://github.com/NationalSecurityAgency/ghidra/pull/6234.diff": "diff --git a/Ghidra/Features/Base/src/main/java/ghidra/app/util/EditFieldNameDialog.java b/Ghidra/Features/Base/src/main/java/ghidra/app/util/EditFieldNameDialog.java\nindex d3c16ded449..96964d1ab73 100644\n--- a/Ghidra/Features/Base/src/main/java/ghidra/app/util/EditFieldNameDialog.java\n+++ b/Ghidra/Features/Base/src/main/java/ghidra/app/util/EditFieldNameDialog.java\n@@ -115,6 +115,7 @@ public void editField(DataTypeComponent dataTypeComponent, Program p) {\n \t\tString name = getCurrentFieldName();\n \t\tsetTitle(\"Edit Field Name: \" + dataTypeComponent.getParent().getName() + \".\" + name);\n \t\tfieldName.setText(name);\n+\t\tfieldName.selectAll();\n \t\tclearStatusText();\n \t\ttool.showDialog(this);\n \t}\n",
   "https://github.com/NationalSecurityAgency/ghidra/pull/6266.diff": "diff --git a/Ghidra/Processors/x86/data/languages/ia.sinc b/Ghidra/Processors/x86/data/languages/ia.sinc\nindex 35f6320df0a..1b7dae7ff5c 100644\n--- a/Ghidra/Processors/x86/data/languages/ia.sinc\n+++ b/Ghidra/Processors/x86/data/languages/ia.sinc\n@@ -4186,7 +4186,7 @@ define pcodeop fcos;\n :FDIV spec_m64      is vexMode=0 & byte=0xDC; reg_opcode=6 ... & spec_m64            { ST0 = ST0 f/ float2float(spec_m64); }    \n :FDIV ST0,freg      is vexMode=0 & byte=0xD8; frow=15 & fpage=0 & freg & ST0        { ST0 = ST0 f/ freg; }            \n :FDIV freg,ST0      is vexMode=0 & byte=0xDC; frow=15 & fpage=1 & freg & ST0        { freg = freg f/ ST0; }           \n-:FDIVP freg,ST0     is vexMode=0 & byte=0xDE; frow=15 & fpage=1 & freg & ST0        { freg = ST0 f/ freg; fpop(); }       \n+:FDIVP freg,ST0     is vexMode=0 & byte=0xDE; frow=15 & fpage=1 & freg & ST0        { freg = freg f/ ST0; fpop(); }       \n :FDIVP              is vexMode=0 & byte=0xDE; byte=0xF9                 { ST1 = ST1 f/ ST0; fpop(); }         \n :FIDIV spec_m32     is vexMode=0 & byte=0xDA; reg_opcode=6 ... & spec_m32            { ST0 = ST0 f/ int2float(spec_m32); }      \n :FIDIV spec_m16     is vexMode=0 & byte=0xDE; reg_opcode=6 ... & spec_m16            { ST0 = ST0 f/ int2float(spec_m16); }      \n@@ -4195,7 +4195,7 @@ define pcodeop fcos;\n :FDIVR spec_m64     is vexMode=0 & byte=0xDC; reg_opcode=7 ... & spec_m64            { ST0 = float2float(spec_m64) f/ ST0; }    \n :FDIVR ST0,freg     is vexMode=0 & byte=0xD8; frow=15 & fpage=1 & freg & ST0        { ST0 = freg f/ ST0; }            \n :FDIVR freg,ST0     is vexMode=0 & byte=0xDC; frow=15 & fpage=0 & freg & ST0        { freg = ST0 f/ freg; }           \n-:FDIVRP freg,ST0    is vexMode=0 & byte=0xDE; frow=15 & fpage=0 & freg & ST0        { freg = freg f/ ST0; fpop(); }       \n+:FDIVRP freg,ST0    is vexMode=0 & byte=0xDE; frow=15 & fpage=0 & freg & ST0        { freg = ST0 f/ freg; fpop(); }       \n :FDIVRP             is vexMode=0 & byte=0xDE; byte=0xF1                 { ST1 = ST0 f/ ST1; fpop(); }         \n :FIDIVR spec_m32    is vexMode=0 & byte=0xDA; reg_opcode=7 ... & spec_m32            { ST0 = int2float(spec_m32) f/ ST0; }      \n :FIDIVR spec_m16    is vexMode=0 & byte=0xDE; reg_opcode=7 ... & spec_m16            { ST0 = int2float(spec_m16) f/ ST0; }      \n",
   "https://github.com/NationalSecurityAgency/ghidra/pull/6270.diff": "diff --git a/Ghidra/Processors/AARCH64/src/main/java/ghidra/app/util/bin/format/elf/relocation/AARCH64_ElfRelocationType.java b/Ghidra/Processors/AARCH64/src/main/java/ghidra/app/util/bin/format/elf/relocation/AARCH64_ElfRelocationType.java\nindex 73e70d8b965..8b990df668b 100644\n--- a/Ghidra/Processors/AARCH64/src/main/java/ghidra/app/util/bin/format/elf/relocation/AARCH64_ElfRelocationType.java\n+++ b/Ghidra/Processors/AARCH64/src/main/java/ghidra/app/util/bin/format/elf/relocation/AARCH64_ElfRelocationType.java\n@@ -66,6 +66,14 @@ public enum AARCH64_ElfRelocationType implements ElfRelocationType {\n \tR_AARCH64_P32_TLSLE_ADD_TPREL_HI12(109),\n \tR_AARCH64_P32_TLSLE_ADD_TPREL_LO12(110),\n \tR_AARCH64_P32_TLSLE_ADD_TPREL_LO12_NC(111),\n+\tR_AARCH64_P32_TLSLE_LDST8_TPREL_LO12(112),\n+\tR_AARCH64_P32_TLSLE_LDST8_TPREL_LO12_NC(113),\n+\tR_AARCH64_P32_TLSLE_LDST16_TPREL_LO12(114),\n+\tR_AARCH64_P32_TLSLE_LDST16_TPREL_LO12_NC(115),\n+\tR_AARCH64_P32_TLSLE_LDST32_TPREL_LO12(116),\n+\tR_AARCH64_P32_TLSLE_LDST32_TPREL_LO12_NC(117),\n+\tR_AARCH64_P32_TLSLE_LDST64_TPREL_LO12(118),\n+\tR_AARCH64_P32_TLSLE_LDST64_TPREL_LO12_NC(119),\n \n \tR_AARCH64_P32_TLSDESC_LD_PREL19(122),\n \tR_AARCH64_P32_TLSDESC_ADR_PREL21(123),\ndiff --git a/Ghidra/Processors/ARM/src/main/java/ghidra/app/util/bin/format/elf/relocation/ARM_ElfRelocationType.java b/Ghidra/Processors/ARM/src/main/java/ghidra/app/util/bin/format/elf/relocation/ARM_ElfRelocationType.java\nindex 91a672aa96e..448eaed91e9 100644\n--- a/Ghidra/Processors/ARM/src/main/java/ghidra/app/util/bin/format/elf/relocation/ARM_ElfRelocationType.java\n+++ b/Ghidra/Processors/ARM/src/main/java/ghidra/app/util/bin/format/elf/relocation/ARM_ElfRelocationType.java\n@@ -147,7 +147,29 @@ public enum ARM_ElfRelocationType implements ElfRelocationType {\n \tR_ARM_PRIVATE_15(127),\n \tR_ARM_ME_TOO(128),\n \tR_ARM_THM_TLS_DESCSEQ16(129),\n-\tR_ARM_THM_TLS_DESCSEQ32(130);\n+\tR_ARM_THM_TLS_DESCSEQ32(130),\n+\tR_ARM_THM_ALU_ABS_G0_NC(132),\n+\tR_ARM_THM_ALU_ABS_G1_NC(133),\n+\tR_ARM_THM_ALU_ABS_G2_NC(134),\n+\tR_ARM_THM_ALU_ABS_G3_NC(135),\n+\tR_ARM_THM_BF16(136),\n+\tR_ARM_THM_BF12(137),\n+\tR_ARM_THM_BF18(138),\n+\tR_ARM_IRELATIVE(160),\n+\tR_ARM_GOTFUNCDEC(161),\n+\tR_ARM_GOTOFFFUNCDESC(162),\n+\tR_ARM_FUNCESC(163),\n+\tR_ARM_FUNCDESC_VALUE(164),\n+\tR_ARM_TLS_GD32_FDPIC(165),\n+\tR_ARM_TLS_LDM32_FDPIC(166),\n+\tR_ARM_TLS_IE32_FDPIC(167),\n+\tR_ARM_RXPC25(249),\n+\tR_ARM_RSBREL32(250),\n+\tR_ARM_THM_RPC22(251),\n+\tR_ARM_RREL32(252),\n+\tR_ARM_RABS32(253),\n+\tR_ARM_RPC24(254),\n+\tR_ARM_RBASE(255);\n \n \tpublic final int typeId;\n \ndiff --git a/Ghidra/Processors/Atmel/src/main/java/ghidra/app/util/bin/format/elf/relocation/AVR8_ElfRelocationType.java b/Ghidra/Processors/Atmel/src/main/java/ghidra/app/util/bin/format/elf/relocation/AVR8_ElfRelocationType.java\nindex f682cb16256..b9f8f129c93 100644\n--- a/Ghidra/Processors/Atmel/src/main/java/ghidra/app/util/bin/format/elf/relocation/AVR8_ElfRelocationType.java\n+++ b/Ghidra/Processors/Atmel/src/main/java/ghidra/app/util/bin/format/elf/relocation/AVR8_ElfRelocationType.java\n@@ -52,7 +52,8 @@ public enum AVR8_ElfRelocationType implements ElfRelocationType {\n \tR_AVR_DIFF32(32),\n \tR_AVR_LDS_STS_16(33),\n \tR_AVR_PORT6(34),\n-\tR_AVR_PORT5(35);\n+\tR_AVR_PORT5(35),\n+\tR_AVR_32_PCREL(36);\n \n \tpublic final int typeId;\n \ndiff --git a/Ghidra/Processors/Loongarch/src/main/java/ghidra/app/util/bin/format/elf/relocation/Loongarch_ElfRelocationType.java b/Ghidra/Processors/Loongarch/src/main/java/ghidra/app/util/bin/format/elf/relocation/Loongarch_ElfRelocationType.java\nindex 78c7371602d..596cf4c6dd6 100644\n--- a/Ghidra/Processors/Loongarch/src/main/java/ghidra/app/util/bin/format/elf/relocation/Loongarch_ElfRelocationType.java\n+++ b/Ghidra/Processors/Loongarch/src/main/java/ghidra/app/util/bin/format/elf/relocation/Loongarch_ElfRelocationType.java\n@@ -40,8 +40,8 @@ public enum Loongarch_ElfRelocationType implements ElfRelocationType {\n \tR_LARCH_IRELATIVE(12), /* Runtime local indirect function resolving\n \t\t\t\t\t\t\t*\t*(void **) PC((((void *)(*)()) (B + A)) ()\n \t\t\t\t\t\t\t*/\n-\n-\t/* Relocations 13..19 reserved for dynamic linker  */\n+\tR_LARCH_TLS_DESC32(13),\n+\tR_LARCH_TLS_DESC64(14),\n \n \tR_LARCH_MARK_LA(20), \t// Mark la.abs Load absolute address for static link.\n \tR_LARCH_MARK_PCREL(21), // Mark external label branch Access PC relative address for static link.\n@@ -148,7 +148,24 @@ public enum Loongarch_ElfRelocationType implements ElfRelocationType {\n \tR_LARCH_SUB6(106), \t\t\t// pcaddi\n \tR_LARCH_ADD_ULEB128(107), \t// relax delete\n \tR_LARCH_SUB_ULEB128(108), \t// relax delete\n-\tR_LARCH_64_PCREL(109); \t\t// pcaddi\n+\tR_LARCH_64_PCREL(109), \t\t// pcaddi\n+\tR_LARCH_CALL32(110),\n+\tR_LARCH_TLS_DESC_PC_HI20(111),\n+\tR_LARCH_TLS_DESC_PC_LO12(112),\n+\tR_LARCH_TLS_DESC64_PC_LO20(113),\n+\tR_LARCH_TLS_DESC64_PC_HI12(114),\n+\tR_LARCH_TLS_DESC_HI20(115),\n+\tR_LARCH_TLS_DESC_LO12(116),\n+\tR_LARCH_TLS_DESC64_LO20(117),\n+\tR_LARCH_TLS_DESC64_HI12(118),\n+\tR_LARCH_TLS_DESC_LD(119),\n+\tR_LARCH_TLS_DESC_CALL(120),\n+\tR_LARCH_TLS_TLS_LE_HI20_R(121),\n+\tR_LARCH_TLS_TLS_LE_ADD_R(122),\n+\tR_LARCH_TLS_TLS_LE_LO12_R(123),\n+\tR_LARCH_TLS_TLS_LD_PCREL20_S2(124),\n+\tR_LARCH_TLS_TLS_GD_PCREL20_S2(125),\n+\tR_LARCH_TLS_TLS_DESC_PCREL20_S2(126);\n \n \tpublic final int typeId;\n \ndiff --git a/Ghidra/Processors/MIPS/src/main/java/ghidra/app/util/bin/format/elf/relocation/MIPS_ElfRelocationType.java b/Ghidra/Processors/MIPS/src/main/java/ghidra/app/util/bin/format/elf/relocation/MIPS_ElfRelocationType.java\nindex 3ab727b0a50..1c480f632a1 100644\n--- a/Ghidra/Processors/MIPS/src/main/java/ghidra/app/util/bin/format/elf/relocation/MIPS_ElfRelocationType.java\n+++ b/Ghidra/Processors/MIPS/src/main/java/ghidra/app/util/bin/format/elf/relocation/MIPS_ElfRelocationType.java\n@@ -96,6 +96,7 @@ public enum MIPS_ElfRelocationType implements ElfRelocationType {\n \tR_MIPS16_TLS_GOTTPREL(110),\n \tR_MIPS16_TLS_TPREL_HI16(111),\n \tR_MIPS16_TLS_TPREL_LO16(112),\n+\tR_MIPS16_PC16_S1(113),\n \n \tR_MIPS16_LO(100), // First MIPS16 reloc type\n \tR_MIPS16_HI(112), // Last MIPS16 reloc type\n@@ -147,7 +148,11 @@ public enum MIPS_ElfRelocationType implements ElfRelocationType {\n \tR_MICROMIPS_LO(133), // First MicroMIPS reloc type\n \tR_MICROMIPS_HI(173), // Last MicroMIPS reloc type\n \n-\tR_MIPS_PC32(248);\n+\tR_MIPS_PC32(248),\n+\tR_MIPS_EH(249),\n+\tR_MIPS_GNU_REL16_S2(250),\n+\tR_MIPS_GNU_VTINHERIT(253),\n+\tR_MIPS_GNU_VTENTRY(254);\n \n \tpublic final int typeId;\n \ndiff --git a/Ghidra/Processors/PowerPC/src/main/java/ghidra/app/util/bin/format/elf/relocation/PowerPC64_ElfRelocationType.java b/Ghidra/Processors/PowerPC/src/main/java/ghidra/app/util/bin/format/elf/relocation/PowerPC64_ElfRelocationType.java\nindex f6c09a2709a..f2ee105dd24 100644\n--- a/Ghidra/Processors/PowerPC/src/main/java/ghidra/app/util/bin/format/elf/relocation/PowerPC64_ElfRelocationType.java\n+++ b/Ghidra/Processors/PowerPC/src/main/java/ghidra/app/util/bin/format/elf/relocation/PowerPC64_ElfRelocationType.java\n@@ -121,10 +121,25 @@ public enum PowerPC64_ElfRelocationType implements ElfRelocationType {\n \tR_PPC64_DTPREL16_HIGHERA(104), // half16    #highera(@dtprel)\n \tR_PPC64_DTPREL16_HIGHEST(105), // half16    #highest(@dtprel)\n \tR_PPC64_DTPREL16_HIGHESTA(106), // half16   #highesta(@dtprel)\n+\tR_PPC64_TLSGD(107),\n+\tR_PPC64_TLSLD(108),\n+\tR_PPC64_TOCSAVE(109),\n+\tR_PPC64_ADDR16_HIGH(110),\n+\tR_PPC64_ADDR16_HIGHA(111),\n+\tR_PPC64_TPREL16_HIGH(112),\n+\tR_PPC64_TPREL16_HIGHA(113),\n+\tR_PPC64_DTPREL16_HIGH(114),\n+\tR_PPC64_DTPREL16_HIGHA(115),\n+\tR_PPC64_REL24_NOTOC(116),\n+\tR_PPC64_ADDR64_LOCAL(117),\n+\tR_PPC64_ENTRY(118),\n+\tR_PPC64_PLTSEQ(119),\n+\tR_PPC64_PLTCALL(120),\n \n \tR_PPC64_PLTSEQ_NOTOC(121),\n \tR_PPC64_PLTCALL_NOTOC(122),\n \tR_PPC64_PCREL_OPT(123),\n+\tR_PPC64_REL24_P9NOTOC(124),\n \n \tR_PPC64_D34(128),\n \tR_PPC64_D34_LO(129),\n@@ -158,7 +173,18 @@ public enum PowerPC64_ElfRelocationType implements ElfRelocationType {\n \tR_PPC64_REL16_HIGHEST(244),\n \tR_PPC64_REL16_HIGHESTA(245),\n \n-\tR_PPC64_JMP_IREL(247);\n+\tR_PPC64_REL16DX_HA(246),\n+\n+\tR_PPC64_JMP_IREL(247),\n+\tR_PPC64_IRELATIVE(248),\n+\n+\tR_PPC64_REL16(249),\n+\tR_PPC64_REL16_LO(250),\n+\tR_PPC64_REL16_HI(251),\n+\tR_PPC64_REL16_HA(252),\n+\n+\tR_PPC64_VTINHERIT(253),\n+\tR_PPC64_VTENTRY(254);\n \n \tpublic final int typeId;\n \ndiff --git a/Ghidra/Processors/PowerPC/src/main/java/ghidra/app/util/bin/format/elf/relocation/PowerPC_ElfRelocationType.java b/Ghidra/Processors/PowerPC/src/main/java/ghidra/app/util/bin/format/elf/relocation/PowerPC_ElfRelocationType.java\nindex d69b6955969..4fc76ebb5f6 100644\n--- a/Ghidra/Processors/PowerPC/src/main/java/ghidra/app/util/bin/format/elf/relocation/PowerPC_ElfRelocationType.java\n+++ b/Ghidra/Processors/PowerPC/src/main/java/ghidra/app/util/bin/format/elf/relocation/PowerPC_ElfRelocationType.java\n@@ -56,6 +56,11 @@ public enum PowerPC_ElfRelocationType implements ElfRelocationType {\n \tR_PPC_SECTOFF_HA(36), \t\t// half16 #ha(R + A)\n \tR_PPC_ADDR30(37), \t\t\t// word30 (S + A - P) >> 2\n \n+\tR_PPC_RELAX(48),\n+\tR_PPC_RELAX_PLT(49),\n+\tR_PPC_RELAX_PLTREL24(50),\n+\tR_PPC_16DX_HA(51),\n+\n \tR_POWERPC_TLS(67),\n \tR_POWERPC_DTPMOD(68),\n \tR_POWERPC_TPREL16(69),\ndiff --git a/Ghidra/Processors/RISCV/src/main/java/ghidra/app/util/bin/format/elf/relocation/RISCV_ElfRelocationType.java b/Ghidra/Processors/RISCV/src/main/java/ghidra/app/util/bin/format/elf/relocation/RISCV_ElfRelocationType.java\nindex 88d693ad7cc..0d795d1fdea 100644\n--- a/Ghidra/Processors/RISCV/src/main/java/ghidra/app/util/bin/format/elf/relocation/RISCV_ElfRelocationType.java\n+++ b/Ghidra/Processors/RISCV/src/main/java/ghidra/app/util/bin/format/elf/relocation/RISCV_ElfRelocationType.java\n@@ -36,6 +36,7 @@ public enum RISCV_ElfRelocationType implements ElfRelocationType {\n \tR_RISCV_TLS_DTPREL64(9), // TLS relocation word64(TLS + S + A - TLS_TP_OFFSET\n \tR_RISCV_TLS_TPREL32(10), // TLS relocation word32(TLS + S + A + S_TLS_OFFSET - TLS_DTV_OFFSET\n \tR_RISCV_TLS_TPREL64(11), // TLS relocation word64(TLS + S + A + S_TLS_OFFSET - TLS_DTV_OFFSET\n+\tR_RISCV_TLSDESC(12),\n \tR_RISCV_BRANCH(16), \t// PC-relative branch (SB-Type)\n \tR_RISCV_JAL(17), \t\t// PC-relative jump (UJ-Type)\n \tR_RISCV_CALL(18), \t\t// PC-relative call MACRO call,tail (auipc+jalr pair)\n@@ -77,9 +78,14 @@ public enum RISCV_ElfRelocationType implements ElfRelocationType {\n \tR_RISCV_SET8(54), \t\t// Local label subtraction \n \tR_RISCV_SET16(55), \t\t// Local label subtraction \n \tR_RISCV_SET32(56), \t\t// Local label subtraction\n-\tR_RISCV_32_PCREL(57); \t// 32-bit PC relative\n-\t// 58-191 Reserved Reserved for future standard use \n-\t// 192-255 Reserved Reserved for nonstandard ABI extensions \n+\tR_RISCV_32_PCREL(57), \t// 32-bit PC relative\n+\tR_RISCV_IRELATIVE(58),\n+\tR_RISCV_SET_ULEB128(60),\n+\tR_RISCV_SUB_ULEB128(61),\n+\tR_RISCV_TLSDESC_HI20(62),\n+\tR_RISCV_TLSDESC_LOAD_LO12(63),\n+\tR_RISCV_TLSDESC_ADD_LO12(64),\n+\tR_RISCV_TLSDESC_CALL(65);\n \n \tpublic final int typeId;\n \ndiff --git a/Ghidra/Processors/Sparc/src/main/java/ghidra/app/util/bin/format/elf/relocation/SPARC_ElfRelocationType.java b/Ghidra/Processors/Sparc/src/main/java/ghidra/app/util/bin/format/elf/relocation/SPARC_ElfRelocationType.java\nindex bf6298eb601..0c6b2bd3165 100644\n--- a/Ghidra/Processors/Sparc/src/main/java/ghidra/app/util/bin/format/elf/relocation/SPARC_ElfRelocationType.java\n+++ b/Ghidra/Processors/Sparc/src/main/java/ghidra/app/util/bin/format/elf/relocation/SPARC_ElfRelocationType.java\n@@ -17,44 +17,107 @@\n \n public enum SPARC_ElfRelocationType implements ElfRelocationType {\n \n-\tR_SPARC_NONE(0), \t\t// No calculation\n-\tR_SPARC_5(44), \t\t\t// S + A\n-\tR_SPARC_6(45), \t\t\t// S + A\n-\tR_SPARC_7(43), \t\t\t// S + A\n-\tR_SPARC_8(1), \t\t\t// S + A\n-\tR_SPARC_10(30), \t\t// S + A\n-\tR_SPARC_11(31), \t\t// S + A\n-\tR_SPARC_13(11), \t\t// S + A\n-\tR_SPARC_16(2), \t\t\t// S + A\n-\tR_SPARC_22(10), \t\t// S + A\n-\tR_SPARC_32(3), \t\t\t// S + A\n-\tR_SPARC_LO10(12), \t\t// (S + A) & 0x3FF\n-\tR_SPARC_HI22(9), \t\t// (S + A) >> 10\n-\tR_SPARC_DISP8(4), \t\t// S + A - P\n-\tR_SPARC_DISP16(5), \t\t// S + A - P\n-\tR_SPARC_DISP32(6), \t\t// S + A - P\n-\tR_SPARC_WDISP16(40), \t// (S + A - P) >> 2\n-\tR_SPARC_WDISP19(41), \t// (S + A - P) >> 2\n-\tR_SPARC_WDISP22(8), \t// (S + A - P) >> 2\n-\tR_SPARC_WDISP30(7), \t// (S + A - P) >> 2\n-\tR_SPARC_PC10(16), \t\t// (S + A - P) & 0x3FF\n-\tR_SPARC_PC22(17), \t\t// (S + A - P) >> 10\n-\tR_SPARC_PLT32(24), \t\t// L + A\n-\tR_SPARC_PCPLT10(29), \t// (L + A - P) & 0x3FF\n-\tR_SPARC_PCPLT22(28), \t// (L + A - P) >> 10\n-\tR_SPARC_PCPLT32(27), \t// L + A - P\n-\tR_SPARC_GOT10(13), \t\t// G & 0x3FF\n-\tR_SPARC_GOT13(14), \t\t// G\n-\tR_SPARC_GOT22(15), \t\t// G >> 10\n-\tR_SPARC_WPLT30(18), \t// (L + A - P) >> 2\n-\tR_SPARC_LOPLT10(26), \t// (L + A) & 0x3FF\n-\tR_SPARC_HIPLT22(25),\t// (L + A) >> 10\n+\tR_SPARC_NONE(0),\t\t// No calculation\n+\tR_SPARC_8(1),\t\t\t// S + A\n+\tR_SPARC_16(2),\t\t\t// S + A\n+\tR_SPARC_32(3),\t\t\t// S + A\n+\tR_SPARC_DISP8(4),\t\t// S + A - P\n+\tR_SPARC_DISP16(5),\t\t// S + A - P\n+\tR_SPARC_DISP32(6),\t\t// S + A - P\n+\tR_SPARC_WDISP30(7),\t\t// (S + A - P) >> 2\n+\tR_SPARC_WDISP22(8),\t\t// (S + A - P) >> 2\n+\tR_SPARC_HI22(9),\t\t// (S + A) >> 10\n+\tR_SPARC_22(10),\t\t\t// S + A\n+\tR_SPARC_13(11),\t\t\t// S + A\n+\tR_SPARC_LO10(12),\t\t// (S + A) & 0x3FF\n+\tR_SPARC_GOT10(13),\t\t// G & 0x3FF\n+\tR_SPARC_GOT13(14),\t\t// G\n+\tR_SPARC_GOT22(15),\t\t// G >> 10\n+\tR_SPARC_PC10(16),\t\t// (S + A - P) & 0x3FF\n+\tR_SPARC_PC22(17),\t\t// (S + A - P) >> 10\n+\tR_SPARC_WPLT30(18),\t\t// (L + A - P) >> 2\n+\tR_SPARC_COPY(19),\t\t// No calculation\n+\tR_SPARC_GLOB_DAT(20),\t\t// S + A\n+\tR_SPARC_JMP_SLOT(21),\t\t//\n+\tR_SPARC_RELATIVE(22),\t\t// B + A\n+\tR_SPARC_UA32(23),\t\t// S + A\n \n-\tR_SPARC_JMP_SLOT(21),\n-\tR_SPARC_UA32(23), \t\t// S + A\n-\tR_SPARC_GLOB_DAT(20), \t// S + A\n-\tR_SPARC_RELATIVE(22), \t// B + A\n-\tR_SPARC_COPY(19); \t\t// No calculation\n+\tR_SPARC_PLT32(24),\t\t// L + A\n+\tR_SPARC_HIPLT22(25),\t\t// (L + A) >> 10\n+\tR_SPARC_LOPLT10(26),\t\t// (L + A) & 0x3FF\n+\tR_SPARC_PCPLT32(27),\t\t// L + A - P\n+\tR_SPARC_PCPLT22(28),\t\t// (L + A - P) >> 10\n+\tR_SPARC_PCPLT10(29),\t\t// (L + A - P) & 0x3FF\n+\n+\tR_SPARC_10(30),\t\t\t// S + A\n+\tR_SPARC_11(31),\t\t\t// S + A\n+\tR_SPARC_64(32),\t\t\t// S + A\n+\tR_SPARC_OLO10(33),\t\t// ((S + A) & 0x3ff) + O\n+\tR_SPARC_HH22(34),\t\t// (S + A) >> 42\n+\tR_SPARC_HM10(35),\t\t// ((S + A) >> 32) & 0x3ff\n+\tR_SPARC_LM22(36),\t\t// (S + A) >> 10\n+\tR_SPARC_PC_H22(37),\t\t// (S + A - P) >> 42\n+\tR_SPARC_PC_HM10(38),\t\t// ((S + A - P) >> 32) & 0x3ff\n+\tR_SPARC_PC_LM22(39),\t\t// (S + A - P) >> 10\n+\tR_SPARC_WDISP16(40),\t\t// (S + A - P) >> 2\n+\tR_SPARC_WDISP19(41),\t\t// (S + A - P) >> 2\n+\tR_SPARC_UNUSED_42(42),\t\t//\n+\tR_SPARC_7(43),\t\t\t// S + A\n+\tR_SPARC_5(44),\t\t\t// S + A\n+\tR_SPARC_6(45),\t\t\t// S + A\n+\tR_SPARC_DISP64(46),\t\t// S + A - P\n+\tR_SPARC_PLT64(47),\t\t// L + A\n+\tR_SPARC_HIX22(48),\t\t// ((S + A) ^ 0xffffffffffffffff) >> 10\n+\tR_SPARC_LOX10(49),\t\t// ((S + A) & 0x3ff) | 0x1c00\n+\tR_SPARC_H44(50),\t\t// ((S + A) >> 22\n+\tR_SPARC_M44(51),\t\t// ((S + A) >> 12) & 0x3ff\n+\tR_SPARC_L44(52),\t\t// (S + A) & 0xfff\n+\tR_SPARC_REGISTER(53),\t\t// S + A\n+\tR_SPARC_UA64(54),\t\t// S + A\n+\tR_SPARC_UA16(55),\t\t// S + A\n+\n+\tR_SPARC_TLS_GD_HI22(56),\t//\n+\tR_SPARC_TLS_GD_LO10(57),\t//\n+\tR_SPARC_TLS_GD_ADD(58),\t\t//\n+\tR_SPARC_TLS_GD_CALL(59),\t//\n+\tR_SPARC_TLS_LDM_HI22(60),\t//\n+\tR_SPARC_TLS_LDM_LO10(61),\t//\n+\tR_SPARC_TLS_LDM_ADD(62),\t//\n+\tR_SPARC_TLS_LDM_CALL(63),\t//\n+\tR_SPARC_TLS_LDO_HIX22(64),\t//\n+\tR_SPARC_TLS_LDO_LO10(65),\t//\n+\tR_SPARC_TLS_LDO_DD(66),\t\t//\n+\tR_SPARC_TLS_IE_HI22(67),\t//\n+\tR_SPARC_TLS_IE_LO10(68),\t//\n+\tR_SPARC_TLS_IE_(69),\t\t//\n+\tR_SPARC_TLS_IE_LDX(70),\t\t//\n+\tR_SPARC_TLS_IE_ADD(71),\t\t//\n+\tR_SPARC_TLS_LE_HIX22(72),\t//\n+\tR_SPARC_TLS_LE_LOX10(73),\t//\n+\tR_SPARC_TLS_DTPMOD32(74),\t//\n+\tR_SPARC_TLS_DTPMOD64(75),\t//\n+\tR_SPARC_TLS_DTPOFF32(76),\t//\n+\tR_SPARC_TLS_DTPOFF64(77),\t//\n+\tR_SPARC_TLS_TPOFF32(78),\t//\n+\tR_SPARC_TLS_TPOFF64(79),\t//\n+\n+\tR_SPARC_GOTDATA_HIX22(80),\t// ((S + A - GOT) >> 10) ^ ((S + A - GOT) >> 31)\n+\tR_SPARC_GOTDATA_LOX10(81),\t// ((S + A - GOT) & 0x3ff) | (((S + A - GOT) >> 31) & 0x1c00)\n+\tR_SPARC_GOTDATA_OP_HIX22(82),\t// (G >> 10) ^ (G >> 31)\n+\tR_SPARC_GOTDATA_OP_LOX10(83),\t// (G & 0x3ff) | ((G >> 31) & 0x1c00)\n+\tR_SPARC_GOTDATA_OP(84),\t\t//\n+\tR_SPARC_H34(85),\t\t// (S + A) >> 12\n+\tR_SPARC_SIZE32(86),\t\t// Z + A\n+\tR_SPARC_SIZE64(87),\t\t// Z + A\n+\tR_SPARC_WDISP10(88),\t\t// (S + A - P) >> 2\n+\n+\t// R_SPARC_max_std\n+\n+\tR_SPARC_JMP_IREL(248),\t\t//\n+\tR_SPARC_IRELATIVE(249),\t\t//\n+\tR_SPARC_GNU_VTIHERIT(250),\t//\n+\tR_SPARC_GNU_VTENTRY(251),\t//\n+\tR_SPARC_REV32(252);\t\t//\n \n \tpublic final int typeId;\n \ndiff --git a/Ghidra/Processors/SuperH4/src/main/java/ghidra/app/util/bin/format/elf/relocation/SH_ElfRelocationType.java b/Ghidra/Processors/SuperH4/src/main/java/ghidra/app/util/bin/format/elf/relocation/SH_ElfRelocationType.java\nindex b1d51340f63..21eeca7d1c9 100644\n--- a/Ghidra/Processors/SuperH4/src/main/java/ghidra/app/util/bin/format/elf/relocation/SH_ElfRelocationType.java\n+++ b/Ghidra/Processors/SuperH4/src/main/java/ghidra/app/util/bin/format/elf/relocation/SH_ElfRelocationType.java\n@@ -117,6 +117,15 @@ public enum SH_ElfRelocationType implements ElfRelocationType {\n \tR_SH_JMP_SLOT64(195),\n \tR_SH_RELATIVE64(196),\n \n+\tR_SH_GOT20(201),\n+\tR_SH_GOTOFF20(202),\n+\tR_SH_GOTFUNCDESC(203),\n+\tR_SH_GOTFUNCDESC20(204),\n+\tR_SH_GOTOFFFUNCDESC(205),\n+\tR_SH_GOTOFFFUNCDESC20(206),\n+\tR_SH_FUNCDESC(207),\n+\tR_SH_FUNCDESC_VALUE(208),\n+\n \tR_SH_SHMEDIA_CODE(242),\n \tR_SH_PT_16(243),\n \tR_SH_IMMS16(244),\ndiff --git a/Ghidra/Processors/eBPF/src/main/java/ghidra/app/util/bin/format/elf/relocation/eBPF_ElfRelocationType.java b/Ghidra/Processors/eBPF/src/main/java/ghidra/app/util/bin/format/elf/relocation/eBPF_ElfRelocationType.java\nindex 9de64e6b534..90368091d63 100644\n--- a/Ghidra/Processors/eBPF/src/main/java/ghidra/app/util/bin/format/elf/relocation/eBPF_ElfRelocationType.java\n+++ b/Ghidra/Processors/eBPF/src/main/java/ghidra/app/util/bin/format/elf/relocation/eBPF_ElfRelocationType.java\n@@ -22,7 +22,8 @@ public enum eBPF_ElfRelocationType implements ElfRelocationType {\n \tR_BPF_64_ABS64(2),\t\t// S + A\n \tR_BPF_64_ABS32(3),\t\t// S + A\n \tR_BPF_64_NODYLD32(4),\t// S + A\n-\tR_BPF_64_32(10);\t\t// (S + A) / 8 - 1\n+\tR_BPF_64_32(10),\t\t// (S + A) / 8 - 1\n+\tR_BPF_GNU_64_16(256);\n \n \tpublic final int typeId;\n \ndiff --git a/Ghidra/Processors/x86/src/main/java/ghidra/app/util/bin/format/elf/relocation/X86_32_ElfRelocationType.java b/Ghidra/Processors/x86/src/main/java/ghidra/app/util/bin/format/elf/relocation/X86_32_ElfRelocationType.java\nindex f8066692ea0..579f56f4d36 100644\n--- a/Ghidra/Processors/x86/src/main/java/ghidra/app/util/bin/format/elf/relocation/X86_32_ElfRelocationType.java\n+++ b/Ghidra/Processors/x86/src/main/java/ghidra/app/util/bin/format/elf/relocation/X86_32_ElfRelocationType.java\n@@ -53,7 +53,11 @@ public enum X86_32_ElfRelocationType implements ElfRelocationType {\n \tR_386_TLS_GOTDESC(39), \t// GOT offset for TLS descriptor.  */\n \tR_386_TLS_DESC_CALL(40), // Marker of call through TLS descriptor for relaxation.  */\n \tR_386_TLS_DESC(41), \t// TLS descriptor containing pointer to code and to argument, returning the TLS offset for the symbol.  */\n-\tR_386_IRELATIVE(42); \t// Adjust indirectly by program base */\n+\tR_386_IRELATIVE(42), \t// Adjust indirectly by program base */\n+\tR_386_GOT32X(43),\n+\tR_386_USED_BY_INTEL_200(200),\n+\tR_386_GNU_VTINHERIT(250),\n+\tR_386_GNU_VTENTRY(251);\n \n \tpublic final int typeId;\n \ndiff --git a/Ghidra/Processors/x86/src/main/java/ghidra/app/util/bin/format/elf/relocation/X86_64_ElfRelocationType.java b/Ghidra/Processors/x86/src/main/java/ghidra/app/util/bin/format/elf/relocation/X86_64_ElfRelocationType.java\nindex 0c0af95b60d..500bd889170 100644\n--- a/Ghidra/Processors/x86/src/main/java/ghidra/app/util/bin/format/elf/relocation/X86_64_ElfRelocationType.java\n+++ b/Ghidra/Processors/x86/src/main/java/ghidra/app/util/bin/format/elf/relocation/X86_64_ElfRelocationType.java\n@@ -73,7 +73,15 @@ public enum X86_64_ElfRelocationType implements ElfRelocationType {\n \tR_X86_64_PLT32_BND(40), // deprecated\n \tR_X86_64_GOTPCRELX(41), // G + GOT + A - P\n \tR_X86_64_REX_GOTPCRELX(42), //G + GOT + A - P\n-\tR_X86_64_NUM(43),\n+\tR_X86_64_CODE_4_GOTPCRELX(43),\n+\tR_X86_64_CODE_4_GOTTPOFF(44),\n+\tR_X86_64_CODE_4_GOTPC32_TLSDESC(45),\n+\tR_X86_64_CODE_5_GOTPCRELX(46),\n+\tR_X86_64_CODE_5_GOTPC32_TLSDESC(47),\n+\tR_X86_64_CODE_5_GOTTPOFF(48),\n+\tR_X86_64_CODE_6_GOTPCRELX(49),\n+\tR_X86_64_CODE_6_GOTTPOFF(50),\n+\tR_X86_64_CODE_6_GOTPC32_TLSDESC(51),\n \n \tR_X86_64_GNU_VTINHERIT(250),\n \tR_X86_64_GNU_VTENTRY(251);\n",
   "https://github.com/NationalSecurityAgency/ghidra/pull/6302.diff": "diff --git a/Ghidra/Features/Base/src/main/java/ghidra/app/util/opinion/MachoProgramBuilder.java b/Ghidra/Features/Base/src/main/java/ghidra/app/util/opinion/MachoProgramBuilder.java\nindex 3ea9c5c61ff..4cddc7ea563 100644\n--- a/Ghidra/Features/Base/src/main/java/ghidra/app/util/opinion/MachoProgramBuilder.java\n+++ b/Ghidra/Features/Base/src/main/java/ghidra/app/util/opinion/MachoProgramBuilder.java\n@@ -998,7 +998,7 @@ else if (loadCommand instanceof LinkerOptionCommand) {\n \n \t/**\n \t * Sets up the {@link MachHeader} in memory and returns its address.  If the header was not \n-\t * intended to reside in memory (like for Mach-O object files}, then this method will create an \n+\t * intended to reside in memory (like for Mach-O object files), then this method will create an\n \t * area in the \"OTHER\" address space for the header to live in.\n \t * \n \t * @param segments A {@link Collection} of {@link SegmentCommand Mach-O segments}\n@@ -1011,12 +1011,15 @@ protected Address setupHeaderAddr(Collection<SegmentCommand> segments)\n \t\tlong lowestFileOffset = Long.MAX_VALUE;\n \n \t\t// Check to see if the header resides in an existing segment.  If it does, we know its\n-\t\t// address and we are done.  Keep track of the lowest file offset of later use.\n+\t\t// address and we are done.  Keep track of the lowest file offset for later use.\n \t\tfor (SegmentCommand segment : segments) {\n-\t\t\tif (segment.getFileOffset() == 0 && segment.getFileSize() > 0) {\n-\t\t\t\treturn space.getAddress(segment.getVMaddress());\n+\t\t\tif (segment.getFileOffset() == 0) {\n+\t\t\t\tif (segment.getFileSize() > 0) {\n+\t\t\t\t\treturn space.getAddress(segment.getVMaddress());\n+\t\t\t\t}\n+\t\t\t} else {\n+\t\t\t\tlowestFileOffset = Math.min(lowestFileOffset, segment.getFileOffset());\n \t\t\t}\n-\t\t\tlowestFileOffset = Math.min(lowestFileOffset, segment.getFileOffset());\n \t\t}\n \n \t\t// The header did not live in a defined segment.  Create a memory region in the OTHER space \n",
   "https://github.com/NationalSecurityAgency/ghidra/pull/6331.diff": "diff --git a/GPL/DemanglerGnu/build.gradle b/GPL/DemanglerGnu/build.gradle\nindex 174747549f1..7a56684947a 100644\n--- a/GPL/DemanglerGnu/build.gradle\n+++ b/GPL/DemanglerGnu/build.gradle\n@@ -82,6 +82,7 @@ model {\n \t\t\ttargetPlatform \"mac_x86_64\"\n \t\t\ttargetPlatform \"mac_arm_64\"\n \t\t\ttargetPlatform \"freebsd_x86_64\"\n+\t\t\ttargetPlatform \"freebsd_arm_64\"\n \t\t\tsources {\n \t\t\t\tc {\n \t\t\t\t\tsource {\n@@ -104,6 +105,7 @@ model {\n \t\t\ttargetPlatform \"mac_x86_64\"\n \t\t\ttargetPlatform \"mac_arm_64\"\n \t\t\ttargetPlatform \"freebsd_x86_64\"\n+\t\t\ttargetPlatform \"freebsd_arm_64\"\n \t\t\tsources {\n \t\t\t\tc {\n \t\t\t\t\tsource {\ndiff --git a/GPL/nativeBuildProperties.gradle b/GPL/nativeBuildProperties.gradle\nindex 6ba0409b6ac..e3494203350 100644\n--- a/GPL/nativeBuildProperties.gradle\n+++ b/GPL/nativeBuildProperties.gradle\n@@ -54,7 +54,11 @@ model {\n \t\t}\n \t\tif (isCurrentFreeBSD()) {\n \t\t\tgcc(Gcc) {\n-\t\t\t\ttarget(\"freebsd_x86_64\")\n+\t\t\t\tif (isCurrentArm_64()) {\n+\t\t\t\t\ttarget(\"freebsd_arm_64\")\n+\t\t\t\t} else {\n+\t\t\t\t\ttarget(\"freebsd_x86_64\")\n+\t\t\t\t}\n \t\t\t}\n \t\t}\n \t\tif (isCurrentWindows() && VISUAL_STUDIO_INSTALL_DIR) {\ndiff --git a/GPL/nativePlatforms.gradle b/GPL/nativePlatforms.gradle\nindex 24d540f10aa..0a2c02a2d2d 100644\n--- a/GPL/nativePlatforms.gradle\n+++ b/GPL/nativePlatforms.gradle\n@@ -25,7 +25,8 @@ project.ext.PLATFORMS = [\n \t[name: \"linux_arm_64\", os: \"linux\", arch: \"arm64\"],\n \t[name: \"mac_x86_64\", os: \"osx\", arch: \"x86_64\"],\n \t[name: \"mac_arm_64\", os: \"osx\", arch: \"arm64\"],\n-\t[name: \"freebsd_x86_64\", os: \"freebsd\", arch: \"x86_64\"]\n+\t[name: \"freebsd_x86_64\", os: \"freebsd\", arch: \"x86_64\"],\n+\t[name: \"freebsd_arm_64\", os: \"freebsd\", arch: \"arm64\"]\n ]\n \n /*********************************************************************************\ndiff --git a/Ghidra/Features/Decompiler/buildNatives.gradle b/Ghidra/Features/Decompiler/buildNatives.gradle\nindex 62bd81d2669..26ffd0d0dfa 100644\n--- a/Ghidra/Features/Decompiler/buildNatives.gradle\n+++ b/Ghidra/Features/Decompiler/buildNatives.gradle\n@@ -43,6 +43,7 @@ model {\n \t\t\ttargetPlatform \"mac_x86_64\"\n \t\t\ttargetPlatform \"mac_arm_64\"\n \t\t\ttargetPlatform \"freebsd_x86_64\"\n+\t\t\ttargetPlatform \"freebsd_arm_64\"\n \t\t\tsources {\n \t\t\t\tcpp {\n \t\t\t\t\t// NOTE: The bison/flex generated files are assumed to be up-to-date.\n@@ -149,6 +150,7 @@ model {\n \t\t\ttargetPlatform \"mac_x86_64\"\n \t\t\ttargetPlatform \"mac_arm_64\"\n \t\t\ttargetPlatform \"freebsd_x86_64\"\n+\t\t\ttargetPlatform \"freebsd_arm_64\"\n \t\t\tsources {\n \t\t\t\tcpp {\n \t\t\t\t\t// NOTE: The bison/flex generated files are assumed to be up-to-date.\ndiff --git a/Ghidra/Framework/Generic/src/main/java/ghidra/framework/Platform.java b/Ghidra/Framework/Generic/src/main/java/ghidra/framework/Platform.java\nindex 68f5d476fbc..a283cdb9536 100644\n--- a/Ghidra/Framework/Generic/src/main/java/ghidra/framework/Platform.java\n+++ b/Ghidra/Framework/Generic/src/main/java/ghidra/framework/Platform.java\n@@ -70,6 +70,11 @@ public enum Platform {\n \t */\n \tFREEBSD_X86_64(OperatingSystem.FREE_BSD, Architecture.X86_64, \"freebsd_x86_64\", \".so\", \"\"),\n \n+\t/**\n+\t * Identifies a FreeBSD ARM 64-bit OS.\n+\t */\n+\tFREEBSD_ARM_64(OperatingSystem.FREE_BSD, Architecture.ARM_64, \"freebsd_arm_64\", \".so\", \"\"),\n+\n \t/**\n \t * Identifies an unsupported OS.\n \t */\ndiff --git a/GhidraDocs/InstallationGuide.html b/GhidraDocs/InstallationGuide.html\nindex 3c47400b846..75bfed9bfdc 100644\n--- a/GhidraDocs/InstallationGuide.html\n+++ b/GhidraDocs/InstallationGuide.html\n@@ -317,6 +317,7 @@ <h2><a name=\"Build\"></a>Building Ghidra Native Components</h2>\n <ul>\n   <li>Linux ARM 64-bit</li>\n   <li>FreeBSD x86 64-bit (no debugger support)</li>\n+  <li>FreeBSD arm 64-bit (no debugger support)</li>\n </ul>\n <p>In order to build native binaries for your platform, you will need the following installed on your\n system:</p>\n"
}